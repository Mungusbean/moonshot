from typing import Any

from moonshot.src.benchmarking.cookbook import (
    add_new_cookbook,
    get_all_cookbooks,
    get_cookbook,
)
from moonshot.src.benchmarking.metrics import run_factscore
from moonshot.src.benchmarking.recipe import (
    add_new_recipe,
    get_all_recipes,
    get_recipes,
)
from moonshot.src.benchmarking.results import get_all_results, read_results
from moonshot.src.benchmarking.run import Run, RunTypes, get_all_runs
from moonshot.src.common.connection import (
    add_new_endpoint,
    get_connection_types,
    get_endpoints,
)
from moonshot.src.common.prompt_template import (
    get_prompt_template_names,
    get_prompt_templates,
)
from moonshot.src.redteaming.session import get_all_sessions


def api_run_factscore(prompts: Any, predicted_results: Any, targets: Any) -> dict:
    """
    Compute the factscore metric for a given set of prompts, predicted results, and targets.

    Args:
        prompts (Any): The prompts used to generate the predicted results.
        predicted_results (Any): The predicted results generated by the model.
        targets (Any): The target results for the prompts.

    Returns:
        dict: A dictionary containing the factscore metric output for the given inputs.
    """
    return run_factscore(prompts, predicted_results, targets)


def api_add_new_endpoint(
    connector_type: str,
    name: str,
    uri: str,
    token: str,
    max_calls_per_second: int,
    max_concurrency: int,
    params: dict,
) -> None:
    """
    Adds an endpoint for a Language Model (LLM) connector.
    This method allows adding an endpoint for a Language Model (LLM) connector. The endpoint is identified by
    its name and associated with the specified connector type. It requires the URI and access token for the
    LLM connector's API.

    Args:
        connector_type (str): The type of the LLM connector (e.g., 'GPT-3', 'Bert', etc.).
        name (str): The name or identifier for the endpoint.
        uri (str): The URI (Uniform Resource Identifier) for the LLM connector's API.
        token (str): The access token required to authenticate and access the LLM connector's API.
        max_calls_per_second (int): The number of api calls per second
        max_concurrency (int): The number of concurrent api calls
        params (dict): A dictionary that contains connection specified parameters
    """
    return add_new_endpoint(
        connector_type, name, uri, token, max_calls_per_second, max_concurrency, params
    )


def api_add_new_cookbook(name: str, description: str, recipes: list) -> None:
    """
    Adds a new cookbook with the specified name, description, and recipes.

    Args:
        name (str): The name of the cookbook.
        description (str): A brief description of the cookbook.
        recipes (list): A list of recipes in the cookbook.
    """

    add_new_cookbook(name, description, recipes)


def api_get_all_cookbooks() -> list:
    """
    Retrieves a list of all cookbooks.

    Returns:
        list: A list of cookbooks.
    """
    return get_all_cookbooks()


def api_get_cookbook(cookbook_name: str) -> dict:
    """
    Retrieves a cookbook based on its name.

    Args:
        cookbook_name (str): The name of the cookbook.

    Returns:
        dict: The cookbook information as a dictionary.
    """
    return get_cookbook(cookbook_name)


def api_run_cookbooks(cookbooks, endpoints, num_of_prompts) -> dict:
    """
    Creates a cookbook run instance.

    Returns:
        dict: A dictionary representing the newly created cookbook run instance.
    """
    cookbook_run = Run(
        RunTypes.COOKBOOK,
        {
            "cookbooks": cookbooks,
            "endpoints": endpoints,
            "num_of_prompts": num_of_prompts,
        },
    )

    return cookbook_run


def api_get_recipes(desired_recipes: list) -> list:
    """
    Retrieves a list of desired recipes.

    Args:
        desired_recipes (list): A list of recipe names to retrieve.

    Returns:
        list: A list of desired recipes, where each recipe is represented as a dictionary or an object.
    """
    return get_recipes(desired_recipes)


def api_add_new_recipe(
    name: str,
    description: str,
    tags: list[str],
    dataset: str,
    prompt_templates: list[str],
    metrics: list[str],
) -> None:
    """
    Adds a new recipe.
    This method allows adding a new recipe with the specified name, description, tags, dataset,
    prompt templates, and a list of metrics.

    Args:
        name (str): The name or identifier of the new recipe.
        description (str): A brief description of the new recipe, providing information about its
        purpose or content.
        tags (list[str]): A list of tags to be included in the new recipe.
        dataset (str): The dataset to be used.
        prompt_templates (list[str]): A list of prompt templates to be included in the new recipe.
        metrics (list[str]): A list of metrics to be included in the new recipe.
    """
    add_new_recipe(name, description, tags, dataset, prompt_templates, metrics)


def api_get_all_recipes() -> list:
    """
    This function retrieves a list of available recipes.

    Returns:
        list: A list of available recipes. Each item in the list represents a recipe.
    """
    return get_all_recipes()


def api_run_recipe(recipes, endpoints, num_of_prompts) -> dict:
    """
    Creates a recipe run instance.

    Returns:
        dict: A dictionary representing the newly created recipe run instance.
    """
    recipe_run = Run(
        RunTypes.RECIPE,
        {
            "recipes": recipes,
            "endpoints": endpoints,
            "num_of_prompts": num_of_prompts,
        },
    )

    return recipe_run


def api_get_all_results() -> list:
    """
    This function retrieves a list of available results.

    Returns:
        list: A list of available results. Each item in the list represents a result.
    """
    return get_all_results()


def api_read_results(results_filename: str) -> dict:
    """
    This function retrieves the contents of a results file.

    Args:
        results_filename: The file name of the results.

    Returns:
        dict: A dictionary of results.
    """
    return read_results(results_filename)


def api_get_all_runs() -> list:
    """
    This method retrieves a list of available runs.

    Returns:
        list: A list of available runs. Each item in the list represents a run.
    """
    return get_all_runs()


def api_load_run(run_id: str) -> None:
    """
    Loads a run using the provided run ID.

    Args:
        run_id (str): The ID of the run to resume.
    """
    return Run.load_run(run_id)


def api_get_connection_types() -> list:
    """
    Gets a list of available Language Model (LLM) connection types.
    This method retrieves a list of available LLM connection types,
    which can be used to identify and configure connections to different LLM
    models or services.

    Returns:
        list: A list of LLM connection types, where each connection type is represented as a string or identifier.
    """
    return get_connection_types()


def api_get_endpoints() -> list:
    """
    Gets a list of Language Model (LLM) endpoints.
    This method retrieves a list of available Language Model (LLM) endpoints.

    Returns:
        list: A list of LLM endpoints, where each endpoint is represented as a dictionary or an object.
    """
    return get_endpoints()


def api_get_prompt_templates() -> list:
    """
    Gets a list of prompt templates.
    This static method retrieves a list of prompt templates available.

    Returns:
        list: A list of prompt templates.
    """
    return get_prompt_templates()


def api_get_prompt_template_names() -> list:
    """
    Gets a list of prompt template names.
    This method retrieves a list of prompt template names available.

    Returns:
        list: A list of prompt template names.
    """
    return get_prompt_template_names()


def api_get_all_sessions() -> list:
    """
    This method retrieves a list of available sessions.

    Returns:
        list: A list of available sessions. Each item in the list represents a session.
    """
    return get_all_sessions()
