import pytest
from fastapi.testclient import TestClient
from unittest.mock import MagicMock, patch
from ..app import init_api
from ..schemas.session_response_model import SessionMetadataModel

app = init_api()

@patch('web_api.services.session_service')
def test_create_session(mock_session_service_module):
    # Setup the mock to return a specific value
    mock_create_session = MagicMock()
    mock_create_session.return_value = SessionMetadataModel(
        session_id="1",
        name="Test Session",
        description="This is a test session",
        created_epoch=123456789,
        created_datetime="2021-01-01T00:00:00",
        endpoints=["mock_endpoint_1"],
        metadata_file="",
        prompt_template="",
        context_strategy=0,
        chats=[],
        filename="",
        chat_history=None
    )
    mock_session_service_module.create_session = mock_create_session

    with TestClient(app) as client:
        response = client.post("/v1/sessions", json={
            "name": "Test Session",
            "description": "This is a test session",
            "endpoints": ["mock_endpoint_1"]
        })

    assert response.status_code == 200
    assert response.json()["name"] == "Test Session"
    assert response.json()["description"] == "This is a test session"
    assert response.json()["endpoints"] == ["mock_endpoint_1"]

# @patch('web_api.services.session_service.get_session')
# def test_get_session(mock_get_session):
#     # Setup the mock
#     mock_get_session.return_value = SessionMetadataModel(
#         session_id="1",
#         name="Test Session",
#         description="This is a test session",
#         created_epoch=123456789,
#         created_datetime="2021-01-01T00:00:00",
#         endpoints=["http://localhost:8080"],
#         metadata_file="",
#         prompt_template="",
#         context_strategy=0,
#         chats=[],
#         filename="",
#         chat_history=None
#     )

#     with TestClient(app) as client:
#         response = client.get("/v1/sessions/1")

#     assert response.status_code == 200
#     assert response.json()["name"] == "Test Session"
#     assert response.json()["description"] == "This is a test session"
#     assert response.json()["endpoints"] == ["http://localhost:8080"]

